{"meta":{"title":"SEEK","subtitle":"seek By AI","description":"庸人罷了","author":"Simon","url":"https://daiyafeigithub.github.io/simonzzz","root":"/simonzzz/"},"pages":[{"title":"friends","date":"2025-01-08T09:59:46.033Z","updated":"2025-01-08T09:59:46.033Z","comments":true,"path":"friends/index.html","permalink":"https://daiyafeigithub.github.io/simonzzz/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2025-01-08T09:59:52.527Z","updated":"2025-01-08T09:59:52.527Z","comments":true,"path":"categories/index.html","permalink":"https://daiyafeigithub.github.io/simonzzz/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2025-01-08T09:59:39.977Z","updated":"2025-01-08T09:59:39.977Z","comments":true,"path":"tags/index.html","permalink":"https://daiyafeigithub.github.io/simonzzz/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2025-01-08T09:59:34.187Z","updated":"2025-01-08T09:59:34.187Z","comments":true,"path":"about/index.html","permalink":"https://daiyafeigithub.github.io/simonzzz/about/index.html","excerpt":"","text":""}],"posts":[{"title":"怎么在github pages部署自己的hexo项目","slug":"howToCreateHexoAtGithubPages","date":"2025-01-08T08:31:54.026Z","updated":"2025-01-08T09:29:21.500Z","comments":true,"path":"2025/01/08/howToCreateHexoAtGithubPages/","permalink":"https://daiyafeigithub.github.io/simonzzz/2025/01/08/howToCreateHexoAtGithubPages/","excerpt":"","text":"在 GitHub Pages 上部署 Hexo 项目是一个常见的需求，Hexo 是一个基于 Node.js 的静态博客生成器，而 GitHub Pages 是一个免费的静态网站托管服务。以下是详细的步骤，帮助你完成 Hexo 项目的部署。 1. 准备工作确保你已经完成以下准备工作： 安装 Node.js 和 npm。 安装 Git。 创建一个 GitHub 仓库（如果还没有）。 2. 安装 Hexo如果你还没有安装 Hexo，可以通过以下命令安装： 1npm install -g hexo-cli 3. 初始化 Hexo 项目在本地初始化一个 Hexo 项目： 123hexo init my-blogcd my-blognpm install my-blog 是你的项目文件夹名称，可以根据需要修改。 4. 配置 Hexo在 Hexo 项目的根目录下，编辑 _config.yml 文件，设置以下内容： 配置部署信息找到 deploy 部分，修改为以下内容： 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: main repo：你的 GitHub 仓库地址。如果仓库名是 username.github.io，GitHub Pages 会自动部署到根目录。 branch：部署分支，通常为 main 或 gh-pages。 配置 URL 和根目录找到 url 和 root 部分，根据你的仓库名称设置： 如果仓库名是 username.github.io： 12url: https://username.github.ioroot: / 如果仓库名是其他名称（如 my-blog）： 12url: https://username.github.io/my-blogroot: /my-blog/ 5. 安装 Hexo 部署插件Hexo 需要一个插件来支持 Git 部署。安装 hexo-deployer-git： 1npm install hexo-deployer-git --save 6. 生成静态文件并部署在项目根目录下运行以下命令： 123hexo cleanhexo generatehexo deploy hexo clean：清理缓存和旧文件。 hexo generate：生成静态文件到 public 目录。 hexo deploy：将生成的静态文件部署到 GitHub 仓库。 7. 配置 GitHub Pages 打开 GitHub 仓库，进入 Settings -&gt; Pages。 在 Source 部分，选择部署分支（如 main 或 gh-pages）。 确保 Custom domain 为空（除非你使用了自定义域名）。 点击 Save 保存设置。 8. 访问你的 GitHub Pages部署完成后，访问以下 URL 查看你的网站： 如果仓库名是 username.github.io，访问 https://username.github.io。 如果仓库名是其他名称（如 my-blog），访问 https://username.github.io/my-blog。 9. 自动部署（可选）如果你希望每次推送代码时自动部署，可以使用 GitHub Actions。 创建 GitHub Actions 工作流在项目根目录下创建 .github/workflows/deploy.yml 文件，内容如下： 123456789101112131415161718192021222324252627282930313233name: Deploy Hexo to GitHub Pageson: push: branches: [&quot;main&quot;]jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 - name: Set up Node.js uses: actions/setup-node@v4 with: node-version: 18 - name: Install Hexo and dependencies run: | npm install -g hexo-cli npm install - name: Generate static files run: | hexo clean hexo generate - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; publish_dir: ./public 这个工作流会在每次推送到 main 分支时自动生成静态文件并部署到 gh-pages 分支。 10. 常见问题页面没有样式 检查 _config.yml 中的 url 和 root 配置是否正确。 确保资源文件路径正确，可以通过浏览器开发者工具查看是否有资源加载失败。 部署失败 检查 GitHub 仓库的 Settings -&gt; Pages，确保部署分支正确。 确保 hexo-deployer-git 插件已安装。 自定义域名 如果你使用了自定义域名，在 source 目录下创建 CNAME 文件，内容为你的域名。例如：1example.com 总结通过以上步骤，你可以将 Hexo 项目成功部署到 GitHub Pages。如果需要自动部署，可以使用 GitHub Actions 实现持续集成。如果有任何问题，可以参考 Hexo 和 GitHub Pages 的官方文档，或查看 GitHub 仓库的构建日志。","categories":[],"tags":[]},{"title":"如何在vue+springboot项目中使用https","slug":"hello-world","date":"2025-01-08T05:59:18.647Z","updated":"2025-01-08T06:18:19.850Z","comments":true,"path":"2025/01/08/hello-world/","permalink":"https://daiyafeigithub.github.io/simonzzz/2025/01/08/hello-world/","excerpt":"","text":"在 Vue + Spring Boot 项目中使用 HTTPS，需要分别在 Vue 前端和 Spring Boot 后端进行配置。以下是具体步骤： 1. 生成 SSL 证书首先，你需要一个 SSL 证书。可以使用自签名证书进行测试，或从受信任的证书颁发机构（CA）获取正式证书。 自签名证书生成使用 OpenSSL 生成自签名证书： 1openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes 这将生成 key.pem（私钥）和 cert.pem（证书）文件。 2. 配置 Spring Boot 使用 HTTPS将证书放入 Spring Boot 项目将生成的 key.pem 和 cert.pem 文件放入 src/main/resources 目录。 修改 application.properties在 application.properties 中添加以下配置： 1234server.port=8443server.ssl.key-store=classpath:keystore.p12server.ssl.key-store-password=your_passwordserver.ssl.key-password=your_password 将 key.pem 和 cert.pem 转换为 PKCS12 格式： 1openssl pkcs12 -export -in cert.pem -inkey key.pem -out keystore.p12 -name tomcat -CAfile cert.pem -caname root 将生成的 keystore.p12 放入 src/main/resources 目录。 3. 配置 Vue 使用 HTTPS修改 Vue 开发服务器配置在 vue.config.js 中配置开发服务器使用 HTTPS： 12345678910111213141516171819const fs = require(&#x27;fs&#x27;);const path = require(&#x27;path&#x27;);module.exports = &#123; devServer: &#123; port: 8080, https: &#123; key: fs.readFileSync(path.resolve(__dirname, &#x27;key.pem&#x27;)), cert: fs.readFileSync(path.resolve(__dirname, &#x27;cert.pem&#x27;)), &#125;, proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;https://localhost:8443&#x27;, secure: false, changeOrigin: true, &#125;, &#125;, &#125;,&#125;; 将 key.pem 和 cert.pem 放入 Vue 项目根目录。 4. 部署配置前端部署将 Vue 项目打包并部署到支持 HTTPS 的服务器（如 Nginx 或 Apache）。 后端部署将 Spring Boot 项目打包为 JAR 或 WAR 文件，并部署到支持 HTTPS 的服务器。 5. 测试启动 Spring Boot 和 Vue 项目，分别通过 https://localhost:8443 和 https://localhost:8080 访问，确保 HTTPS 正常工作。 6. 其他注意事项 证书有效期：自签名证书仅用于测试，生产环境应使用受信任的 CA 证书。 混合内容：确保前端资源（如 JS、CSS）通过 HTTPS 加载，避免混合内容问题。 CORS：如果前后端分离部署，配置正确的 CORS 策略。 通过这些步骤，你的 Vue + Spring Boot 项目将能够使用 HTTPS 进行安全通信。","categories":[{"name":"技术","slug":"技术","permalink":"https://daiyafeigithub.github.io/simonzzz/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"deepseek","slug":"deepseek","permalink":"https://daiyafeigithub.github.io/simonzzz/tags/deepseek/"},{"name":"教程","slug":"教程","permalink":"https://daiyafeigithub.github.io/simonzzz/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"https://daiyafeigithub.github.io/simonzzz/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"deepseek","slug":"deepseek","permalink":"https://daiyafeigithub.github.io/simonzzz/tags/deepseek/"},{"name":"教程","slug":"教程","permalink":"https://daiyafeigithub.github.io/simonzzz/tags/%E6%95%99%E7%A8%8B/"}]}